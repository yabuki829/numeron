import unittest
from numeron import Numeron


class NumeronTest(unittest.TestCase):
    def setUp(self):
       self.candidates = [ i for i in range(10)]
       self.numeron = Numeron()
    

    
    def test_0E0B(self):
        # 0,1,2を使わない組み合わせなので
        # (10 - 3) * (10 - 3 - 1) * (10 - 3 - 2)
        # 7 * 6 * 5 = 210通り

        predict = [0,1,2]
        result = self.numeron.result_0E0B(predict,self.numeron.initial_ans)
        
        self.assertEqual(result, [[3, 4, 5], [3, 4, 6], [3, 4, 7], [3, 4, 8], [3, 4, 9], [3, 5, 4], [3, 5, 6], [3, 5, 7], [3, 5, 8], [3, 5, 9], [3, 6, 4], [3, 6, 5], [3, 6, 7], [3, 6, 8], [3, 6, 9], [3, 7, 4], [3, 7, 5], [3, 7, 6], [3, 7, 8], [3, 7, 9], [3, 8, 4], [3, 8, 5], [3, 8, 6], [3, 8, 7], [3, 8, 9], [3, 9, 4], [3, 9, 5], [3, 9, 6], [3, 9, 7], [3, 9, 8], [4, 3, 5], [4, 3, 6], [4, 3, 7], [4, 3, 8], [4, 3, 9], [4, 5, 3], [4, 5, 6], [4, 5, 7], [4, 5, 8], [4, 5, 9], [4, 6, 3], [4, 6, 5], [4, 6, 7], [4, 6, 8], [4, 6, 9], [4, 7, 3], [4, 7, 5], [4, 7, 6], [4, 7, 8], [4, 7, 9], [4, 8, 3], [4, 8, 5], [4, 8, 6], [4, 8, 7], [4, 8, 9], [4, 9, 3], [4, 9, 5], [4, 9, 6], [4, 9, 7], [4, 9, 8], [5, 3, 4], [5, 3, 6], [5, 3, 7], [5, 3, 8], [5, 3, 9], [5, 4, 3], [5, 4, 6], [5, 4, 7], [5, 4, 8], [5, 4, 9], [5, 6, 3], [5, 6, 4], [5, 6, 7], [5, 6, 8], [5, 6, 9], [5, 7, 3], [5, 7, 4], [5, 7, 6], [5, 7, 8], [5, 7, 9], [5, 8, 3], [5, 8, 4], [5, 8, 6], [5, 8, 7], [5, 8, 9], [5, 9, 3], [5, 9, 4], [5, 9, 6], [5, 9, 7], [5, 9, 8], [6, 3, 4], [6, 3, 5], [6, 3, 7], [6, 3, 8], [6, 3, 9], [6, 4, 3], [6, 4, 5], [6, 4, 7], [6, 4, 8], [6, 4, 9], [6, 5, 3], [6, 5, 4], [6, 5, 7], [6, 5, 8], [6, 5, 9], [6, 7, 3], [6, 7, 4], [6, 7, 5], [6, 7, 8], [6, 7, 9], [6, 8, 3], [6, 8, 4], [6, 8, 5], [6, 8, 7], [6, 8, 9], [6, 9, 3], [6, 9, 4], [6, 9, 5], [6, 9, 7], [6, 9, 8], [7, 3, 4], [7, 3, 5], [7, 3, 6], [7, 3, 8], [7, 3, 9], [7, 4, 3], [7, 4, 5], [7, 4, 6], [7, 4, 8], [7, 4, 9], [7, 5, 3], [7, 5, 4], [7, 5, 6], [7, 5, 8], [7, 5, 9], [7, 6, 3], [7, 6, 4], [7, 6, 5], [7, 6, 8], [7, 6, 9], [7, 8, 3], [7, 8, 4], [7, 8, 5], [7, 8, 6], [7, 8, 9], [7, 9, 3], [7, 9, 4], [7, 9, 5], [7, 9, 6], [7, 9, 8], [8, 3, 4], [8, 3, 5], [8, 3, 6], [8, 3, 7], [8, 3, 9], [8, 4, 3], [8, 4, 5], [8, 4, 6], [8, 4, 7], [8, 4, 9], [8, 5, 3], [8, 5, 4], [8, 5, 6], [8, 5, 7], [8, 5, 9], [8, 6, 3], [8, 6, 4], [8, 6, 5], [8, 6, 7], [8, 6, 9], [8, 7, 3], [8, 7, 4], [8, 7, 5], [8, 7, 6], [8, 7, 9], [8, 9, 3], [8, 9, 4], [8, 9, 5], [8, 9, 6], [8, 9, 7], [9, 3, 4], [9, 3, 5], [9, 3, 6], [9, 3, 7], [9, 3, 8], [9, 4, 3], [9, 4, 5], [9, 4, 6], [9, 4, 7], [9, 4, 8], [9, 5, 3], [9, 5, 4], [9, 5, 6], [9, 5, 7], [9, 5, 8], [9, 6, 3], [9, 6, 4], [9, 6, 5], [9, 6, 7], [9, 6, 8], [9, 7, 3], [9, 7, 4], [9, 7, 5], [9, 7, 6], [9, 7, 8], [9, 8, 3], [9, 8, 4], [9, 8, 5], [9, 8, 6], [9, 8, 7]])

    def test_0E1B(self):
        # 0,1,2のうち一つは正解で残りは不正解

        # A) 0が入っていて1,2が入ってない かつ 元の位置でない
        # B) 1が入っていて0,2が入ってない かつ 元の位置でない
        # C) 2が入っていて0,1が入ってない かつ 元の位置でない

        # x0x, xx0 の2パターン
            
        # xに入れるのは 3,4,5,6,7,8,9の7つ
        # 7P2 = 42通り * 2  = 84 

        # ABC三つあるので 84 * 3 = 252通り

        predict = [0,1,2]
        result = self.numeron.result_0E1B(predict,self.numeron.initial_ans)

        self.assertEqual(result,[[1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 3, 8], [1, 3, 9], [1, 4, 3], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 4, 8], [1, 4, 9], [1, 5, 3], [1, 5, 4], [1, 5, 6], [1, 5, 7], [1, 5, 8], [1, 5, 9], [1, 6, 3], [1, 6, 4], [1, 6, 5], [1, 6, 7], [1, 6, 8], [1, 6, 9], [1, 7, 3], [1, 7, 4], [1, 7, 5], [1, 7, 6], [1, 7, 8], [1, 7, 9], [1, 8, 3], [1, 8, 4], [1, 8, 5], [1, 8, 6], [1, 8, 7], [1, 8, 9], [1, 9, 3], [1, 9, 4], [1, 9, 5], [1, 9, 6], [1, 9, 7], [1, 9, 8], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 7], [2, 3, 8], [2, 3, 9], [2, 4, 3], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 4, 8], [2, 4, 9], [2, 5, 3], [2, 5, 4], [2, 5, 6], [2, 5, 7], [2, 5, 8], [2, 5, 9], [2, 6, 3], [2, 6, 4], [2, 6, 5], [2, 6, 7], [2, 6, 8], [2, 6, 9], [2, 7, 3], [2, 7, 4], [2, 7, 5], [2, 7, 6], [2, 7, 8], [2, 7, 9], [2, 8, 3], [2, 8, 4], [2, 8, 5], [2, 8, 6], [2, 8, 7], [2, 8, 9], [2, 9, 3], [2, 9, 4], [2, 9, 5], [2, 9, 6], [2, 9, 7], [2, 9, 8], [3, 0, 4], [3, 0, 5], [3, 0, 6], [3, 0, 7], [3, 0, 8], [3, 0, 9], [3, 2, 4], [3, 2, 5], [3, 2, 6], [3, 2, 7], [3, 2, 8], [3, 2, 9], [3, 4, 0], [3, 4, 1], [3, 5, 0], [3, 5, 1], [3, 6, 0], [3, 6, 1], [3, 7, 0], [3, 7, 1], [3, 8, 0], [3, 8, 1], [3, 9, 0], [3, 9, 1], [4, 0, 3], [4, 0, 5], [4, 0, 6], [4, 0, 7], [4, 0, 8], [4, 0, 9], [4, 2, 3], [4, 2, 5], [4, 2, 6], [4, 2, 7], [4, 2, 8], [4, 2, 9], [4, 3, 0], [4, 3, 1], [4, 5, 0], [4, 5, 1], [4, 6, 0], [4, 6, 1], [4, 7, 0], [4, 7, 1], [4, 8, 0], [4, 8, 1], [4, 9, 0], [4, 9, 1], [5, 0, 3], [5, 0, 4], [5, 0, 6], [5, 0, 7], [5, 0, 8], [5, 0, 9], [5, 2, 3], [5, 2, 4], [5, 2, 6], [5, 2, 7], [5, 2, 8], [5, 2, 9], [5, 3, 0], [5, 3, 1], [5, 4, 0], [5, 4, 1], [5, 6, 0], [5, 6, 1], [5, 7, 0], [5, 7, 1], [5, 8, 0], [5, 8, 1], [5, 9, 0], [5, 9, 1], [6, 0, 3], [6, 0, 4], [6, 0, 5], [6, 0, 7], [6, 0, 8], [6, 0, 9], [6, 2, 3], [6, 2, 4], [6, 2, 5], [6, 2, 7], [6, 2, 8], [6, 2, 9], [6, 3, 0], [6, 3, 1], [6, 4, 0], [6, 4, 1], [6, 5, 0], [6, 5, 1], [6, 7, 0], [6, 7, 1], [6, 8, 0], [6, 8, 1], [6, 9, 0], [6, 9, 1], [7, 0, 3], [7, 0, 4], [7, 0, 5], [7, 0, 6], [7, 0, 8], [7, 0, 9], [7, 2, 3], [7, 2, 4], [7, 2, 5], [7, 2, 6], [7, 2, 8], [7, 2, 9], [7, 3, 0], [7, 3, 1], [7, 4, 0], [7, 4, 1], [7, 5, 0], [7, 5, 1], [7, 6, 0], [7, 6, 1], [7, 8, 0], [7, 8, 1], [7, 9, 0], [7, 9, 1], [8, 0, 3], [8, 0, 4], [8, 0, 5], [8, 0, 6], [8, 0, 7], [8, 0, 9], [8, 2, 3], [8, 2, 4], [8, 2, 5], [8, 2, 6], [8, 2, 7], [8, 2, 9], [8, 3, 0], [8, 3, 1], [8, 4, 0], [8, 4, 1], [8, 5, 0], [8, 5, 1], [8, 6, 0], [8, 6, 1], [8, 7, 0], [8, 7, 1], [8, 9, 0], [8, 9, 1], [9, 0, 3], [9, 0, 4], [9, 0, 5], [9, 0, 6], [9, 0, 7], [9, 0, 8], [9, 2, 3], [9, 2, 4], [9, 2, 5], [9, 2, 6], [9, 2, 7], [9, 2, 8], [9, 3, 0], [9, 3, 1], [9, 4, 0], [9, 4, 1], [9, 5, 0], [9, 5, 1], [9, 6, 0], [9, 6, 1], [9, 7, 0], [9, 7, 1], [9, 8, 0], [9, 8, 1]])

    def test_0E2B(self):
         
        # 0, 1, 2の中で2つは正解で一つは間違い 

        # A) 0と1 が正解で かつ 元の位置でない
        # B) 1と2 が正解で かつ 元の位置でない
        # C) 2と0 が正解で かつ 元の位置でない

       # 0,1 xの組み合わせ
       # yxx yに入れるのは 1,3,4,5,6,7,8,9の8つ     
        # 01 10 
        # 02 20
        # 21 12 

         # 56パターン
         self.assertEqual(1,[[1, 0, 3], [1, 0, 4], [1, 0, 5], [1, 0, 6], [1, 0, 7], [1, 0, 8], [1, 0, 9], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 2, 8], [1, 2, 9], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [2, 0, 3], [2, 0, 4], [2, 0, 5], [2, 0, 6], [2, 0, 7], [2, 0, 8], [2, 0, 9], [2, 3, 0], [2, 3, 1], [2, 4, 0], [2, 4, 1], [2, 5, 0], [2, 5, 1], [2, 6, 0], [2, 6, 1], [2, 7, 0], [2, 7, 1], [2, 8, 0], [2, 8, 1], [2, 9, 0], [2, 9, 1], [3, 0, 1], [3, 2, 1], [4, 0, 1], [4, 2, 1], [5, 0, 1], [5, 2, 1], [6, 0, 1], [6, 2, 1], [7, 0, 1], [7, 2, 1], [8, 0, 1], [8, 2, 1], [9, 0, 1], [9, 2, 1]])

    def test_0E3B(self):
         self.assertEqual(1,1)


    def test_1E0B(self):
         self.assertEqual(1,1)


    def test_2E0B(self):
         self.assertEqual(1,1)


    def test_1E1B(self):
         self.assertEqual(1,1)

    def test_1E2B(self):
         self.assertEqual(1,1)

    def test_2E1B(self):
         self.assertEqual(1,1)
